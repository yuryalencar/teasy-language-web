package Teasy.structure;

/*Generated by MPS */

import jetbrains.mps.lang.smodel.LanguageConceptIndex;
import jetbrains.mps.lang.smodel.LanguageConceptIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public final class LanguageConceptSwitch {
  private final LanguageConceptIndex myIndex;
  public static final int ClickElement = 0;
  public static final int Component = 1;
  public static final int Components = 2;
  public static final int Configuration = 3;
  public static final int ExecuteJavascript = 4;
  public static final int Flow = 5;
  public static final int FlowItem = 6;
  public static final int Flows = 7;
  public static final int Hooks = 8;
  public static final int InputText = 9;
  public static final int Keyword = 10;
  public static final int Page = 11;
  public static final int PageRegisterConfig = 12;
  public static final int PageShouldContain = 13;
  public static final int PageShouldContainElement = 14;
  public static final int PageShouldNotContain = 15;
  public static final int PageShouldNotContainElement = 16;
  public static final int PageToRegister = 17;
  public static final int Step = 18;
  public static final int WaitForCondition = 19;
  public static final int WaitUntilElementIsEnabled = 20;
  public static final int WaitUntilElementIsNotVisible = 21;
  public static final int WaitUntilElementIsVisible = 22;
  public static final int WaitUntilPageContains = 23;
  public static final int WaitUntilPageContainsElement = 24;
  public static final int WaitUntilPageDoesNotContain = 25;
  public static final int WaitUntilPageDoesNotContainElement = 26;

  public LanguageConceptSwitch() {
    LanguageConceptIndexBuilder builder = new LanguageConceptIndexBuilder(0x67c1fa65c7ac493dL, 0xb11b664188147c91L);
    builder.put(0x1afad254c1f432adL, ClickElement);
    builder.put(0x637c9747e118846bL, Component);
    builder.put(0x7dbf8857483dd032L, Components);
    builder.put(0x637c9747e115f171L, Configuration);
    builder.put(0x1afad254c1f432fbL, ExecuteJavascript);
    builder.put(0x4326e26a2123e15dL, Flow);
    builder.put(0x4326e26a2123e121L, FlowItem);
    builder.put(0x4326e26a2135e169L, Flows);
    builder.put(0x3d4bb2987a5388f8L, Hooks);
    builder.put(0x29b0fffc80c7b56fL, InputText);
    builder.put(0x29b0fffc80bf369dL, Keyword);
    builder.put(0x29b0fffc80bf36a1L, Page);
    builder.put(0x4b2c28ff7a1373d5L, PageRegisterConfig);
    builder.put(0x1afad254c1f4341dL, PageShouldContain);
    builder.put(0x1afad254c1f4345eL, PageShouldContainElement);
    builder.put(0x1afad254c1f434aaL, PageShouldNotContain);
    builder.put(0x1afad254c1f434acL, PageShouldNotContainElement);
    builder.put(0x4b2c28ff7a1373d8L, PageToRegister);
    builder.put(0x29b0fffc80bf36a0L, Step);
    builder.put(0x1afad254c1f4336bL, WaitForCondition);
    builder.put(0x1afad254c1f448f8L, WaitUntilElementIsEnabled);
    builder.put(0x1afad254c1f4486aL, WaitUntilElementIsNotVisible);
    builder.put(0x1afad254c1f44869L, WaitUntilElementIsVisible);
    builder.put(0x4f2a0581122bf7e4L, WaitUntilPageContains);
    builder.put(0x4f2a0581122bf8e8L, WaitUntilPageContainsElement);
    builder.put(0x4f2a0581122bf96dL, WaitUntilPageDoesNotContain);
    builder.put(0x4f2a0581122bf99fL, WaitUntilPageDoesNotContainElement);
    myIndex = builder.seal();
  }

  /*package*/ int index(SConceptId cid) {
    return myIndex.index(cid);
  }

  public int index(SAbstractConcept concept) {
    return myIndex.index(concept);
  }
}
