@inproceedings{10.1109/ICSE43902.2021.00118,
author = {Mayr-Dorn, Christoph and Vierhauser, Michael and Bichler, Stefan and Keplinger, Felix and Cleland-Huang, Jane and Egyed, Alexander and Mehofer, Thomas},
title = {Supporting Quality Assurance with Automated Process-Centric Quality Constraints Checking},
year = {2021},
isbn = {9781450390859},
publisher = {IEEE Press},
url = {https://doi.org/10.1109/ICSE43902.2021.00118},
doi = {10.1109/ICSE43902.2021.00118},
abstract = {Regulations, standards, and guidelines for safety-critical systems stipulate stringent traceability but do not prescribe the corresponding, detailed software engineering process. Given the industrial practice of using only semi-formal notations to describe engineering processes, processes are rarely "executable" and developers have to spend significant manual effort in ensuring that they follow the steps mandated by quality assurance. The size and complexity of systems and regulations makes manual, timely feedback from Quality Assurance (QA) engineers infeasible. In this paper we propose a novel framework for tracking processes in the background, automatically checking QA constraints depending on process progress, and informing the developer of unfulfilled QA constraints. We evaluate our approach by applying it to two different case studies; one open source community system and a safety-critical system in the air-traffic control domain. Results from the analysis show that trace links are often corrected or completed after the fact and thus timely and automated constraint checking support has significant potential on reducing rework.},
booktitle = {Proceedings of the 43rd International Conference on Software Engineering},
pages = {1298–1310},
numpages = {13},
keywords = {developer support, software engineering process, traceability},
location = {Madrid, Spain},
series = {ICSE '21}
}

@article{10.1145/514144.514743,
author = {Wainer, Gabriel A. and Daicz, Sergio and De Simoni, Luis F. and Wassermann, Demian},
title = {Using the Alfa-1 Simulated Processor for Educational Purposes},
year = {2001},
issue_date = {December 2001},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {1},
number = {4},
issn = {1531-4278},
url = {https://doi.org/10.1145/514144.514743},
doi = {10.1145/514144.514743},
abstract = {Alfa-1 is a simulated computer designed for computer organization courses. Alfa-1 and its accompanying toolkit allow students to acquire practical insights into developing hardware by extending existing components. The DEVS formalism is used to model individual components and to integrate them into a hierarchy that describes the detailed behavior of different levels of a computer's architecture. We introduce Alfa-1 and the toolkit, show how to extend existing components, and describe how to use Alfa-1 for educational purposes. We also explain how to assemble, link, and execute applications and how to test new extensions usingthe testing tools.},
journal = {J. Educ. Resour. Comput.},
month = {dec},
pages = {111–151},
numpages = {41},
keywords = {systems specification, modeling computer architectures, DEVS formalism}
}

@inproceedings{10.1145/2593743.2593747,
author = {Malakuti, Somayeh and Wilke, Claas},
title = {Energy Aspects: Modularizing Energy-Aware Applications},
year = {2014},
isbn = {9781450328449},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2593743.2593747},
doi = {10.1145/2593743.2593747},
abstract = {To effectively extend legacy applications with energy-awareness functionality, dedicated modularization mechanisms are required. This paper introduces the GreenDev framework, which integrates energy testing and event-based modularization for this matter. Energy testing facilitates identifying the energy-related interfaces of applications to the energy-awareness functionality, and event-based modularization facilitates modularizing this functionality from the base functionality of the applications. To maintain loose coupling among these, GreenDev offers a dedicated interface definition language, which enables defining the interfaces abstractly from the actual implementation of the applications. The applications are automatically augmented with these interfaces. We illustrate the applicability of GreenDev in implementing an energy-aware mobile emailing app.},
booktitle = {Proceedings of the 3rd International Workshop on Green and Sustainable Software},
pages = {23–30},
numpages = {8},
keywords = {energy st-atechart, aspect-orientated programming, energy testing, Event-based modularization},
location = {Hyderabad, India},
series = {GREENS 2014}
}

@inproceedings{10.1145/3064899.3064907,
author = {Peijnenburg, Falco and Hage, Jurriaan and Serrano, Alejandro},
title = {Type Directives and Type Graphs in Elm},
year = {2016},
isbn = {9781450347679},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3064899.3064907},
doi = {10.1145/3064899.3064907},
abstract = {We introduce type graphs into Elm in order to improve type error messages for infinite types, and integrate type qualifiers (for type classes a la Haskell) and Elm's row polymorphism into type graphs. We also discuss how specialized type rules and siblings can be used to achieve domain-specific type error diagnosis in the context of Elm.},
booktitle = {Proceedings of the 28th Symposium on the Implementation and Application of Functional Programming Languages},
articleno = {2},
numpages = {12},
keywords = {type error diagnosis, embedded domain specific languages, type graphs, type classes, Elm},
location = {Leuven, Belgium},
series = {IFL 2016}
}

@inproceedings{10.1145/1478873.1478890,
author = {Allen, J. R. and Yau, S. S.},
title = {Real-Time Fault Detection for Small Computers},
year = {1971},
isbn = {9781450379090},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1478873.1478890},
doi = {10.1145/1478873.1478890},
abstract = {Advancing technology and declining costs have led to a sharp increase in the number and variety of small computers in use. Because small computers are readily suited for many real-time applications, a great deal of work has been directed toward simplifying the interface between the computer and its peripherals. Hardware interrupting capability and a specially designed I/O bus are required for peripheral device interfacing in a real-time environment and such things as direct memory access, data channels, and multilevel hardware and software interrupt capability are common. These machines tend to be parallel, synchronous computers with a relatively simple architecture.},
booktitle = {Proceedings of the May 16-18, 1972, Spring Joint Computer Conference},
pages = {119–127},
numpages = {9},
location = {Atlantic City, New Jersey},
series = {AFIPS '72 (Spring)}
}

@inproceedings{10.1145/3242744.3242748,
author = {Breitner, Joachim},
title = {A Promise Checked is a Promise Kept: Inspection Testing},
year = {2018},
isbn = {9781450358354},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3242744.3242748},
doi = {10.1145/3242744.3242748},
abstract = {Occasionally, developers need to ensure that the compiler treats their code in a specific way that is only visible by inspecting intermediate or final compilation artifacts. This is particularly common with carefully crafted compositional libraries, where certain usage patterns are expected to trigger an intricate sequence of compiler optimizations – stream fusion is a well-known example. The developer of such a library has to manually inspect build artifacts and check for the expected properties. Because this is too tedious to do often, it will likely go unnoticed if the property is broken by a change to the library code, its dependencies or the compiler. The lack of automation has led to released versions of such libraries breaking their documented promises. This indicates that there is an unrecognized need for a new testing paradigm, inspection testing, where the programmer declaratively describes non-functional properties of an compilation artifact and the compiler checks these properties. We define inspection testing abstractly, implement it in the context of the Haskell Compiler GHC and show that it increases the quality of such libraries.},
booktitle = {Proceedings of the 11th ACM SIGPLAN International Symposium on Haskell},
pages = {14–25},
numpages = {12},
keywords = {Testing, Haskell, Compilers},
location = {St. Louis, MO, USA},
series = {Haskell 2018}
}

@article{10.1145/3299711.3242748,
author = {Breitner, Joachim},
title = {A Promise Checked is a Promise Kept: Inspection Testing},
year = {2018},
issue_date = {July 2018},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {53},
number = {7},
issn = {0362-1340},
url = {https://doi.org/10.1145/3299711.3242748},
doi = {10.1145/3299711.3242748},
abstract = {Occasionally, developers need to ensure that the compiler treats their code in a specific way that is only visible by inspecting intermediate or final compilation artifacts. This is particularly common with carefully crafted compositional libraries, where certain usage patterns are expected to trigger an intricate sequence of compiler optimizations – stream fusion is a well-known example. The developer of such a library has to manually inspect build artifacts and check for the expected properties. Because this is too tedious to do often, it will likely go unnoticed if the property is broken by a change to the library code, its dependencies or the compiler. The lack of automation has led to released versions of such libraries breaking their documented promises. This indicates that there is an unrecognized need for a new testing paradigm, inspection testing, where the programmer declaratively describes non-functional properties of an compilation artifact and the compiler checks these properties. We define inspection testing abstractly, implement it in the context of the Haskell Compiler GHC and show that it increases the quality of such libraries.},
journal = {SIGPLAN Not.},
month = {sep},
pages = {14–25},
numpages = {12},
keywords = {Haskell, Compilers, Testing}
}

@inproceedings{10.5555/2394101.2394117,
author = {Weil, Frank and Mastenbrook, Brian and Nelson, David and Dietz, Paul and Van Den Berg, Aswin},
title = {Automated Semantic Analysis of Design Models},
year = {2007},
isbn = {3540752080},
publisher = {Springer-Verlag},
address = {Berlin, Heidelberg},
abstract = {Based on several years of experience in generating code from large SDL and UML models in the telecommunications domain, it has become apparent that model analysis must be used to augment more traditional validation and testing techniques. While model correctness is extremely important, the difficulty of use and non-scalability of most formal verification techniques when applied to large-scale design models renders them insufficient for most applications. We have also repeatedly seen that even the most complete test coverage fails to find many problems. In contrast, sophisticated model analysis techniques can be applied without human interaction to large-scale models. A discussion of the model analysis techniques and the model defects that they can detect is provided, along with some real-world examples of defects that have been caught.},
booktitle = {Proceedings of the 10th International Conference on Model Driven Engineering Languages and Systems},
pages = {166–180},
numpages = {15},
location = {Nashville, TN},
series = {MODELS'07}
}

@inproceedings{10.1145/3213846.3213859,
author = {Strandberg, Per Erik and Ostrand, Thomas J. and Weyuker, Elaine J. and Sundmark, Daniel and Afzal, Wasif},
title = {Automated Test Mapping and Coverage for Network Topologies},
year = {2018},
isbn = {9781450356992},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3213846.3213859},
doi = {10.1145/3213846.3213859},
abstract = {Communication devices such as routers and switches play a critical role in the reliable functioning of embedded system networks. Dozens of such devices may be part of an embedded system network, and they need to be tested in conjunction with various computational elements on actual hardware, in many different configurations that are representative of actual operating networks. An individual physical network topology can be used as the basis for a test system that can execute many test cases, by identifying the part of the physical network topology that corresponds to the configuration required by each individual test case. Given a set of available test systems and a large number of test cases, the problem is to determine for each test case, which of the test systems are suitable for executing the test case, and to provide the mapping that associates the test case elements (the logical network topology) with the appropriate elements of the test system (the physical network topology). We studied a real industrial environment where this problem was originally handled by a simple software procedure that was very slow in many cases, and also failed to provide thorough coverage of each network's elements. In this paper, we represent both the test systems and the test cases as graphs, and develop a new prototype algorithm that a) determines whether or not a test case can be mapped to a subgraph of the test system, b) rapidly finds mappings that do exist, and c) exercises diverse sets of network nodes when multiple mappings exist for the test case. The prototype has been implemented and applied to over 10,000 combinations of test cases and test systems, and reduced the computation time by a factor of more than 80 from the original procedure. In addition, relative to a meaningful measure of network topology coverage, the mappings achieved an increased level of thoroughness in exercising the elements of each test system.},
booktitle = {Proceedings of the 27th ACM SIGSOFT International Symposium on Software Testing and Analysis},
pages = {73–83},
numpages = {11},
keywords = {testing, subgraph isomorphism, test coverage, network topology},
location = {Amsterdam, Netherlands},
series = {ISSTA 2018}
}

@inproceedings{10.1145/3007120.3007123,
author = {Dumont, Cyril and Mourlin, Fabrice and Nel, Laurent},
title = {A Mobile Distributed System for Remote Resource Access},
year = {2016},
isbn = {9781450348065},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3007120.3007123},
doi = {10.1145/3007120.3007123},
abstract = {Mobile and distributed systems involve multiple mobile computers processing data and communicating the results to each other, such as in electronic commerce or online voting, where the users are geographically separated. Our contribution is on mobile distributed applications based on embedded platforms such as smartphones or tablets. We provide a definition of a protocol called MEXP which stands for Mobile Exchange eXperiment Protocol. It allows the exposure of local resources on a mobile device to other mobile computers of the distributed system. The kinds of resources are pictures and sounds which are recorded with a mobile device during lab activities. They require the use of a local Wi-Fi network for the security of the recorded data. The lab activities evolve over time and the observers have remote access to the pictures and sounds for validation and tagging. This work has resulted in the acceptance of our mobile distributed application by an academic training team in the Biology department.},
booktitle = {Proceedings of the 14th International Conference on Advances in Mobile Computing and Multi Media},
pages = {154–163},
numpages = {10},
keywords = {data collection, NFC exchange, distributed application, Mobile architecture, mobile REST services},
location = {Singapore, Singapore},
series = {MoMM '16}
}

@inproceedings{10.1145/2804302.2804313,
author = {McDonell, Trevor L. and Chakravarty, Manuel M. T. and Grover, Vinod and Newton, Ryan R.},
title = {Type-Safe Runtime Code Generation: Accelerate to LLVM},
year = {2015},
isbn = {9781450338080},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2804302.2804313},
doi = {10.1145/2804302.2804313},
abstract = {Embedded languages are often compiled at application runtime; thus, embedded compile-time errors become application runtime errors. We argue that advanced type system features, such as GADTs and type families, play a crucial role in minimising such runtime errors. Specifically, a rigorous type discipline reduces runtime errors due to bugs in both embedded language applications and the implementation of the embedded language compiler itself. In this paper, we focus on the safety guarantees achieved by type preserving compilation. We discuss the compilation pipeline of Accelerate, a high-performance array language targeting both multicore CPUs and GPUs, where we are able to preserve types from the source language down to a low-level register language in SSA form. Specifically, we demonstrate the practicability of our approach by creating a new type-safe interface to the industrial-strength LLVM compiler infrastructure, which we used to build two new Accelerate backends that show competitive runtimes on a set of benchmarks across both CPUs and GPUs.},
booktitle = {Proceedings of the 2015 ACM SIGPLAN Symposium on Haskell},
pages = {201–212},
numpages = {12},
keywords = {Dynamic Compilation, GPGPU, Code Generation, Haskell, Data Parallelism, Embedded Language, LLVM, Arrays},
location = {Vancouver, BC, Canada},
series = {Haskell '15}
}

@article{10.1145/2887747.2804313,
author = {McDonell, Trevor L. and Chakravarty, Manuel M. T. and Grover, Vinod and Newton, Ryan R.},
title = {Type-Safe Runtime Code Generation: Accelerate to LLVM},
year = {2015},
issue_date = {December 2015},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {50},
number = {12},
issn = {0362-1340},
url = {https://doi.org/10.1145/2887747.2804313},
doi = {10.1145/2887747.2804313},
abstract = {Embedded languages are often compiled at application runtime; thus, embedded compile-time errors become application runtime errors. We argue that advanced type system features, such as GADTs and type families, play a crucial role in minimising such runtime errors. Specifically, a rigorous type discipline reduces runtime errors due to bugs in both embedded language applications and the implementation of the embedded language compiler itself. In this paper, we focus on the safety guarantees achieved by type preserving compilation. We discuss the compilation pipeline of Accelerate, a high-performance array language targeting both multicore CPUs and GPUs, where we are able to preserve types from the source language down to a low-level register language in SSA form. Specifically, we demonstrate the practicability of our approach by creating a new type-safe interface to the industrial-strength LLVM compiler infrastructure, which we used to build two new Accelerate backends that show competitive runtimes on a set of benchmarks across both CPUs and GPUs.},
journal = {SIGPLAN Not.},
month = {aug},
pages = {201–212},
numpages = {12},
keywords = {GPGPU, Dynamic Compilation, Code Generation, Haskell, Embedded Language, Data Parallelism, LLVM, Arrays}
}

@inproceedings{10.1145/3314221.3314601,
author = {Dasgupta, Sandeep and Park, Daejun and Kasampalis, Theodoros and Adve, Vikram S. and Ro\c{s}u, Grigore},
title = {A Complete Formal Semantics of X86-64 User-Level Instruction Set Architecture},
year = {2019},
isbn = {9781450367127},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3314221.3314601},
doi = {10.1145/3314221.3314601},
abstract = {We present the most complete and thoroughly tested formal semantics of x86-64 to date. Our semantics faithfully formalizes all the non-deprecated, sequential user-level instructions of the x86-64 Haswell instruction set architecture. This totals 3155 instruction variants, corresponding to 774 mnemonics. The semantics is fully executable and has been tested against more than 7,000 instruction-level test cases and the GCC torture test suite. This extensive testing paid off, revealing bugs in both the x86-64 reference manual and other existing semantics. We also illustrate potential applications of our semantics in different formal analyses, and discuss how it can be useful for processor verification.},
booktitle = {Proceedings of the 40th ACM SIGPLAN Conference on Programming Language Design and Implementation},
pages = {1133–1148},
numpages = {16},
keywords = {x86-64, Formal Semantics, ISA specification},
location = {Phoenix, AZ, USA},
series = {PLDI 2019}
}

@article{10.1145/844128.844152,
author = {White, Brian and Lepreau, Jay and Stoller, Leigh and Ricci, Robert and Guruprasad, Shashi and Newbold, Mac and Hibler, Mike and Barb, Chad and Joglekar, Abhijeet},
title = {An Integrated Experimental Environment for Distributed Systems and Networks},
year = {2003},
issue_date = {Winter 2002},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {36},
number = {SI},
issn = {0163-5980},
url = {https://doi.org/10.1145/844128.844152},
doi = {10.1145/844128.844152},
abstract = {Three experimental environments traditionally support network and distributed systems research: network emulators, network simulators, and live networks. The continued use of multiple approaches highlights both the value and inadequacy of each. Netbed, a descendant of Emulab, provides an experimentation facility that integrates these approaches, allowing researchers to configure and access networks composed of emulated, simulated, and wide-area nodes and links. Netbed's primary goals are ease of use, control, and realism, achieved through consistent use of virtualization and abstraction.By providing operating system-like services, such as resource allocation and scheduling, and by virtualizing heterogeneous resources, Netbed acts as a virtual machine for network experimentation. This paper presents Netbed's overall design and implementation and demonstrates its ability to improve experimental automation and efficiency. These, in turn, lead to new methods of experimentation, including automated parameter-space studies within emulation and straightforward comparisons of simulated, emulated, and wide-area scenarios.},
journal = {SIGOPS Oper. Syst. Rev.},
month = {dec},
pages = {255–270},
numpages = {16}
}

@inproceedings{10.1145/1409944.1409969,
author = {Liu, Xin and Sridharan, Ashwin and Machiraju, Sridhar and Seshadri, Mukund and Zang, Hui},
title = {Experiences in a 3G Network: Interplay between the Wireless Channel and Applications},
year = {2008},
isbn = {9781605580968},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1409944.1409969},
doi = {10.1145/1409944.1409969},
abstract = {We present an experimental characterization of the physical and MAC layers in CDMA 1xEV-DO and their impact on transport layer performance. The 1xEV-DO network is currently the fastest mobile broadband cellular network, offering data rates of up to 3.1 Mbps for both stationary and mobile users. These rates are achieved by using novel capacity enhancement techniques at the lower layers. Specifically, 1xEV-DO incorporates rapid channel rate adaptation in response to signal conditions, and opportunistic scheduling to exploit channel fluctuations. Although shown to perform well in isolation, there is no comprehensive literature that examines the impact of these features on transport layer and application performance in real networks.We take the first step in addressing this issue through a large set of experiments conducted on a commercial 1xEV-DO network. Our evaluation includes both stationary and mobile scenarios wherein we transferred data using four popular transport protocols: TCPReno, TCP-Vegas, TCP-Westwood, and TCP-Cubic, and logged detailed measurements about wireless channel level characteristics as well as transport layer performance. We analyzed data from several days of experiments and inferred the properties of the physical, MAC and transport layers, as well as potential interactions between them. We find that the wireless channel data rate shows significant variability over long time scales on the order of hours, but retains high memory and predictability over small time scales on the order of milliseconds. We also find that loss-based TCP variants are largely unaffected by channel variations due to the presence of large buffers, and hence able to achieve in excess of 80% of the system capacity.},
booktitle = {Proceedings of the 14th ACM International Conference on Mobile Computing and Networking},
pages = {211–222},
numpages = {12},
keywords = {TCP, CDMA, cross-layer, SINR, 3G, mobility, cellular, measurement, proportional fair (PF), DRC, 1xEV-DO},
location = {San Francisco, California, USA},
series = {MobiCom '08}
}

@proceedings{10.1145/3411764,
title = {CHI '21: Proceedings of the 2021 CHI Conference on Human Factors in Computing Systems},
year = {2021},
isbn = {9781450380966},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
location = {Yokohama, Japan}
}

@article{10.1145/62764.1062251,
author = {Asher, Lisa},
title = {DA STANDARDS ACTIVITIES: Summary: Standard Package Position Papers VHDL Model Standards Group},
year = {1988},
issue_date = {December 1, 1988},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {18},
number = {3–4},
issn = {0163-5743},
url = {https://doi.org/10.1145/62764.1062251},
doi = {10.1145/62764.1062251},
abstract = {The following are abridged versions of position papers being used by the IEEE/DASS in developing the IEEE VHDL standard. These were supplied by Jim Armstrong who is Chairman of the VHDL Model Subgroup. Complete versions of the papers and minutes of the IEEE VHDL Subgroup are archived at the IEEE Computer Society. For further information call Rick Cain at 202-371-0101. I believe that sometime in the fall of 89 Design and Test will publish a special issue on the VHDL standard based on the final resolutions of the DASS. Special thanks to J. W. Smith for help in obtaining this material.},
journal = {SIGDA Newsl.},
month = {dec},
pages = {31},
numpages = {54}
}

@proceedings{10.1145/2970276,
title = {ASE 2016: Proceedings of the 31st IEEE/ACM International Conference on Automated Software Engineering},
year = {2016},
isbn = {9781450338455},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
location = {Singapore, Singapore}
}

@article{10.1145/3084225,
author = {Storer, Tim},
title = {Bridging the Chasm: A Survey of Software Engineering Practice in Scientific Programming},
year = {2017},
issue_date = {July 2018},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {50},
number = {4},
issn = {0360-0300},
url = {https://doi.org/10.1145/3084225},
doi = {10.1145/3084225},
abstract = {The use of software is pervasive in all fields of science. Associated software development efforts may be very large, long lived, and complex, requiring the commitment of significant resources. However, several authors have argued that the “gap” or “chasm” between software engineering and scientific programming is a serious risk to the production of reliable scientific results, as demonstrated in a number of case studies. This article reviews the research that addresses the gap, exploring how both software engineering and research practice may need to evolve to accommodate the use of software in science.},
journal = {ACM Comput. Surv.},
month = {aug},
articleno = {47},
numpages = {32},
keywords = {Software engineering, scientific programming}
}

@proceedings{10.1145/3508397,
title = {MEDES '22: Proceedings of the 14th International Conference on Management of Digital EcoSystems},
year = {2022},
isbn = {9781450392198},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
abstract = {During the past years, the International Conference on ManagEment of Digital EcoSystems (MEDES) has become one of the most important international scientific events bringing together researchers, developers, and practitioners to discuss latest research issues and experiences in developing advanced solutions that will help to design, deploy, exploit and tune emerging ecosystems.},
location = {Venice, Italy}
}

@proceedings{10.5555/3571885,
title = {SC '22: Proceedings of the International Conference on High Performance Computing, Networking, Storage and Analysis},
year = {2022},
isbn = {9784665454445},
publisher = {IEEE Press},
abstract = {This volume, containing the accepted technical papers and ACM Gordon Bell prize finalists, captures the best current research in all aspects of High Performance Computing (HPC). The SC22 Archive at the conference web site sc22.supercomputing.org complements this volume by collecting other high quality, peer-reviewed material including research posters, the visualization &amp; data analytics showcase, panels, birds of a feather, workshops, and tutorials.},
location = {Dallas, Texas}
}

@proceedings{10.1145/2517349,
title = {SOSP '13: Proceedings of the Twenty-Fourth ACM Symposium on Operating Systems Principles},
year = {2013},
isbn = {9781450323888},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
abstract = {Welcome to the Proceedings of the 24th ACM Symposium on Operating Systems Principles (SOSP 2013), held at the Nemacolin Woodlands Resort, Farmington, Pennsylvania, USA. This year's program includes 30 papers, and touches on a wide range of computer systems topics, from kernels to big data, from responsiveness to correctness, and from devices to data centers. The program committee made every effort to identify and include some of the most creative and thought-provoking ideas in computer systems today. Each accepted paper was shepherded by a program committee member to make sure the papers are as readable and complete as possible. We hope you will enjoy the program as much as we did in selecting it.},
location = {Farminton, Pennsylvania}
}

@proceedings{10.1145/3544902,
title = {ESEM '22: Proceedings of the 16th ACM / IEEE International Symposium on Empirical Software Engineering and Measurement},
year = {2022},
isbn = {9781450394277},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
location = {Helsinki, Finland}
}

@proceedings{10.1145/3555228,
title = {SBES '22: Proceedings of the XXXVI Brazilian Symposium on Software Engineering},
year = {2022},
isbn = {9781450397353},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
location = {Virtual Event, Brazil}
}

@proceedings{10.1145/3556223,
title = {ICCCM '22: Proceedings of the 10th International Conference on Computer and Communications Management},
year = {2022},
isbn = {9781450396349},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
location = {Okayama, Japan}
}

@book{10.1145/3226595,
editor = {Brodie, Michael L.},
title = {Making Databases Work: The Pragmatic Wisdom of Michael Stonebraker},
year = {2018},
isbn = {9781947487192},
publisher = {Association for Computing Machinery and Morgan &amp; Claypool},
volume = {22},
abstract = {At the ACM Awards banquet in June 2017, during the 50th anniversary celebration of the A.M. Turing Award, ACM announced the launch of the ACM A.M. Turing Book Series, a sub-series of ACM Books, to celebrate the winners of the A.M. Turing Award, computing's highest honor, the "Nobel Prize" for computing. This series aims to highlight the accomplishments of awardees, explaining their major contributions of lasting importance in computing."Making Databases Work: The Pragmatic Wisdom of Michael Stonebraker," the first book in the series, celebrates Mike's contributions and impact. What accomplishments warranted computing's highest honor? How did Stonebraker do it? Who is Mike Stonebraker---researcher, professor, CTO, lecturer, innovative product developer, serial entrepreneur, and decades-long leader, and research evangelist for the database community. This book describes Mike's many contributions and evaluates them in light of the Turing Award.The book describes, in 36 chapters, the unique nature, significance, and impact of Mike's achievements in advancing modern database systems over more than 40 years. The stories involve technical concepts, projects, people, prototype systems, failures, lucky accidents, crazy risks, startups, products, venture capital, and lots of applications that drove Mike Stonebraker's achievements and career. Even if you have no interest in databases at all, you'll gain insights into the birth and evolution of Turing Award-worthy achievements from the perspectives of 39 remarkable computer scientists and professionals.Today, data is considered the world's most valuable resource ("The Economist," May 6, 2017), whether it is in the tens of millions of databases used to manage the world's businesses and governments, in the billions of databases in our smartphones and watches, or residing elsewhere, as yet unmanaged, awaiting the elusive next generation of database systems. Every one of the millions or billions of databases includes features that are celebrated by the 2014 A.M. Turing Award and are described in this book.}
}

@proceedings{10.1145/3565387,
title = {CSAE '22: Proceedings of the 6th International Conference on Computer Science and Application Engineering},
year = {2022},
isbn = {9781450396004},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
location = {Virtual Event, China}
}

